#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import sentry_common_service.ttypes

from thrift.transport import TTransport
all_structs = []


class TSentryGrantOption(object):
    TRUE = 1
    FALSE = 0
    UNSET = -1

    _VALUES_TO_NAMES = {
        1: "TRUE",
        0: "FALSE",
        -1: "UNSET",
    }

    _NAMES_TO_VALUES = {
        "TRUE": 1,
        "FALSE": 0,
        "UNSET": -1,
    }


class TSentryPrincipalType(object):
    NONE = 0
    ROLE = 1
    USER = 2

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "ROLE",
        2: "USER",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "ROLE": 1,
        "USER": 2,
    }


class TSentryPrivilege(object):
    """
    Attributes:
     - privilegeScope
     - serverName
     - dbName
     - tableName
     - URI
     - action
     - createTime
     - grantOption
     - columnName
    """


    def __init__(self, privilegeScope=None, serverName=None, dbName="", tableName="", URI="", action="", createTime=None, grantOption=0, columnName="",):
        self.privilegeScope = privilegeScope
        self.serverName = serverName
        self.dbName = dbName
        self.tableName = tableName
        self.URI = URI
        self.action = action
        self.createTime = createTime
        self.grantOption = grantOption
        self.columnName = columnName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.privilegeScope = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.serverName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.dbName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.tableName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.URI = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.action = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.grantOption = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.columnName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryPrivilege')
        if self.privilegeScope is not None:
            oprot.writeFieldBegin('privilegeScope', TType.STRING, 1)
            oprot.writeString(self.privilegeScope.encode('utf-8') if sys.version_info[0] == 2 else self.privilegeScope)
            oprot.writeFieldEnd()
        if self.serverName is not None:
            oprot.writeFieldBegin('serverName', TType.STRING, 3)
            oprot.writeString(self.serverName.encode('utf-8') if sys.version_info[0] == 2 else self.serverName)
            oprot.writeFieldEnd()
        if self.dbName is not None:
            oprot.writeFieldBegin('dbName', TType.STRING, 4)
            oprot.writeString(self.dbName.encode('utf-8') if sys.version_info[0] == 2 else self.dbName)
            oprot.writeFieldEnd()
        if self.tableName is not None:
            oprot.writeFieldBegin('tableName', TType.STRING, 5)
            oprot.writeString(self.tableName.encode('utf-8') if sys.version_info[0] == 2 else self.tableName)
            oprot.writeFieldEnd()
        if self.URI is not None:
            oprot.writeFieldBegin('URI', TType.STRING, 6)
            oprot.writeString(self.URI.encode('utf-8') if sys.version_info[0] == 2 else self.URI)
            oprot.writeFieldEnd()
        if self.action is not None:
            oprot.writeFieldBegin('action', TType.STRING, 7)
            oprot.writeString(self.action.encode('utf-8') if sys.version_info[0] == 2 else self.action)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 8)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        if self.grantOption is not None:
            oprot.writeFieldBegin('grantOption', TType.I32, 9)
            oprot.writeI32(self.grantOption)
            oprot.writeFieldEnd()
        if self.columnName is not None:
            oprot.writeFieldBegin('columnName', TType.STRING, 10)
            oprot.writeString(self.columnName.encode('utf-8') if sys.version_info[0] == 2 else self.columnName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.privilegeScope is None:
            raise TProtocolException(message='Required field privilegeScope is unset!')
        if self.serverName is None:
            raise TProtocolException(message='Required field serverName is unset!')
        if self.action is None:
            raise TProtocolException(message='Required field action is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryGroup(object):
    """
    Attributes:
     - groupName
    """


    def __init__(self, groupName=None,):
        self.groupName = groupName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.groupName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryGroup')
        if self.groupName is not None:
            oprot.writeFieldBegin('groupName', TType.STRING, 1)
            oprot.writeString(self.groupName.encode('utf-8') if sys.version_info[0] == 2 else self.groupName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.groupName is None:
            raise TProtocolException(message='Required field groupName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCreateSentryRoleRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - roleName
    """


    def __init__(self, protocol_version=2, requestorUserName=None, roleName=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.roleName = roleName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.roleName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCreateSentryRoleRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.roleName is not None:
            oprot.writeFieldBegin('roleName', TType.STRING, 3)
            oprot.writeString(self.roleName.encode('utf-8') if sys.version_info[0] == 2 else self.roleName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.roleName is None:
            raise TProtocolException(message='Required field roleName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCreateSentryRoleResponse(object):
    """
    Attributes:
     - status
    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCreateSentryRoleResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDropSentryRoleRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - roleName
    """


    def __init__(self, protocol_version=2, requestorUserName=None, roleName=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.roleName = roleName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.roleName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDropSentryRoleRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.roleName is not None:
            oprot.writeFieldBegin('roleName', TType.STRING, 3)
            oprot.writeString(self.roleName.encode('utf-8') if sys.version_info[0] == 2 else self.roleName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.roleName is None:
            raise TProtocolException(message='Required field roleName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDropSentryRoleResponse(object):
    """
    Attributes:
     - status
    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDropSentryRoleResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAlterSentryRoleAddGroupsRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - roleName
     - groups
    """


    def __init__(self, protocol_version=2, requestorUserName=None, roleName=None, groups=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.roleName = roleName
        self.groups = groups

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.roleName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.SET:
                    self.groups = set()
                    (_etype3, _size0) = iprot.readSetBegin()
                    for _i4 in range(_size0):
                        _elem5 = TSentryGroup()
                        _elem5.read(iprot)
                        self.groups.add(_elem5)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAlterSentryRoleAddGroupsRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.roleName is not None:
            oprot.writeFieldBegin('roleName', TType.STRING, 3)
            oprot.writeString(self.roleName.encode('utf-8') if sys.version_info[0] == 2 else self.roleName)
            oprot.writeFieldEnd()
        if self.groups is not None:
            oprot.writeFieldBegin('groups', TType.SET, 5)
            oprot.writeSetBegin(TType.STRUCT, len(self.groups))
            for iter6 in self.groups:
                iter6.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.roleName is None:
            raise TProtocolException(message='Required field roleName is unset!')
        if self.groups is None:
            raise TProtocolException(message='Required field groups is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAlterSentryRoleAddGroupsResponse(object):
    """
    Attributes:
     - status
    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAlterSentryRoleAddGroupsResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAlterSentryRoleAddUsersRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - roleName
     - users
    """


    def __init__(self, protocol_version=1, requestorUserName=None, roleName=None, users=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.roleName = roleName
        self.users = users

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.roleName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.users = set()
                    (_etype10, _size7) = iprot.readSetBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.users.add(_elem12)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAlterSentryRoleAddUsersRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.roleName is not None:
            oprot.writeFieldBegin('roleName', TType.STRING, 3)
            oprot.writeString(self.roleName.encode('utf-8') if sys.version_info[0] == 2 else self.roleName)
            oprot.writeFieldEnd()
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.SET, 4)
            oprot.writeSetBegin(TType.STRING, len(self.users))
            for iter13 in self.users:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.roleName is None:
            raise TProtocolException(message='Required field roleName is unset!')
        if self.users is None:
            raise TProtocolException(message='Required field users is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAlterSentryRoleAddUsersResponse(object):
    """
    Attributes:
     - status
    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAlterSentryRoleAddUsersResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAlterSentryRoleDeleteGroupsRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - roleName
     - groups
    """


    def __init__(self, protocol_version=2, requestorUserName=None, roleName=None, groups=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.roleName = roleName
        self.groups = groups

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.roleName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.SET:
                    self.groups = set()
                    (_etype17, _size14) = iprot.readSetBegin()
                    for _i18 in range(_size14):
                        _elem19 = TSentryGroup()
                        _elem19.read(iprot)
                        self.groups.add(_elem19)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAlterSentryRoleDeleteGroupsRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.roleName is not None:
            oprot.writeFieldBegin('roleName', TType.STRING, 3)
            oprot.writeString(self.roleName.encode('utf-8') if sys.version_info[0] == 2 else self.roleName)
            oprot.writeFieldEnd()
        if self.groups is not None:
            oprot.writeFieldBegin('groups', TType.SET, 5)
            oprot.writeSetBegin(TType.STRUCT, len(self.groups))
            for iter20 in self.groups:
                iter20.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.roleName is None:
            raise TProtocolException(message='Required field roleName is unset!')
        if self.groups is None:
            raise TProtocolException(message='Required field groups is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAlterSentryRoleDeleteGroupsResponse(object):
    """
    Attributes:
     - status
    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAlterSentryRoleDeleteGroupsResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAlterSentryRoleDeleteUsersRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - roleName
     - users
    """


    def __init__(self, protocol_version=1, requestorUserName=None, roleName=None, users=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.roleName = roleName
        self.users = users

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.roleName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.users = set()
                    (_etype24, _size21) = iprot.readSetBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.users.add(_elem26)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAlterSentryRoleDeleteUsersRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.roleName is not None:
            oprot.writeFieldBegin('roleName', TType.STRING, 3)
            oprot.writeString(self.roleName.encode('utf-8') if sys.version_info[0] == 2 else self.roleName)
            oprot.writeFieldEnd()
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.SET, 4)
            oprot.writeSetBegin(TType.STRING, len(self.users))
            for iter27 in self.users:
                oprot.writeString(iter27.encode('utf-8') if sys.version_info[0] == 2 else iter27)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.roleName is None:
            raise TProtocolException(message='Required field roleName is unset!')
        if self.users is None:
            raise TProtocolException(message='Required field users is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAlterSentryRoleDeleteUsersResponse(object):
    """
    Attributes:
     - status
    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAlterSentryRoleDeleteUsersResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAlterSentryRoleGrantPrivilegeRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - roleName
     - privilege
     - privileges
    """


    def __init__(self, protocol_version=2, requestorUserName=None, roleName=None, privilege=None, privileges=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.roleName = roleName
        self.privilege = privilege
        self.privileges = privileges

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.roleName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.privilege = TSentryPrivilege()
                    self.privilege.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.SET:
                    self.privileges = set()
                    (_etype31, _size28) = iprot.readSetBegin()
                    for _i32 in range(_size28):
                        _elem33 = TSentryPrivilege()
                        _elem33.read(iprot)
                        self.privileges.add(_elem33)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAlterSentryRoleGrantPrivilegeRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.roleName is not None:
            oprot.writeFieldBegin('roleName', TType.STRING, 3)
            oprot.writeString(self.roleName.encode('utf-8') if sys.version_info[0] == 2 else self.roleName)
            oprot.writeFieldEnd()
        if self.privilege is not None:
            oprot.writeFieldBegin('privilege', TType.STRUCT, 5)
            self.privilege.write(oprot)
            oprot.writeFieldEnd()
        if self.privileges is not None:
            oprot.writeFieldBegin('privileges', TType.SET, 6)
            oprot.writeSetBegin(TType.STRUCT, len(self.privileges))
            for iter34 in self.privileges:
                iter34.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.roleName is None:
            raise TProtocolException(message='Required field roleName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAlterSentryRoleGrantPrivilegeResponse(object):
    """
    Attributes:
     - status
     - privilege
     - privileges
    """


    def __init__(self, status=None, privilege=None, privileges=None,):
        self.status = status
        self.privilege = privilege
        self.privileges = privileges

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.privilege = TSentryPrivilege()
                    self.privilege.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.privileges = set()
                    (_etype38, _size35) = iprot.readSetBegin()
                    for _i39 in range(_size35):
                        _elem40 = TSentryPrivilege()
                        _elem40.read(iprot)
                        self.privileges.add(_elem40)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAlterSentryRoleGrantPrivilegeResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.privilege is not None:
            oprot.writeFieldBegin('privilege', TType.STRUCT, 2)
            self.privilege.write(oprot)
            oprot.writeFieldEnd()
        if self.privileges is not None:
            oprot.writeFieldBegin('privileges', TType.SET, 3)
            oprot.writeSetBegin(TType.STRUCT, len(self.privileges))
            for iter41 in self.privileges:
                iter41.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAlterSentryRoleRevokePrivilegeRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - roleName
     - privilege
     - privileges
    """


    def __init__(self, protocol_version=2, requestorUserName=None, roleName=None, privilege=None, privileges=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.roleName = roleName
        self.privilege = privilege
        self.privileges = privileges

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.roleName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.privilege = TSentryPrivilege()
                    self.privilege.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.SET:
                    self.privileges = set()
                    (_etype45, _size42) = iprot.readSetBegin()
                    for _i46 in range(_size42):
                        _elem47 = TSentryPrivilege()
                        _elem47.read(iprot)
                        self.privileges.add(_elem47)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAlterSentryRoleRevokePrivilegeRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.roleName is not None:
            oprot.writeFieldBegin('roleName', TType.STRING, 3)
            oprot.writeString(self.roleName.encode('utf-8') if sys.version_info[0] == 2 else self.roleName)
            oprot.writeFieldEnd()
        if self.privilege is not None:
            oprot.writeFieldBegin('privilege', TType.STRUCT, 5)
            self.privilege.write(oprot)
            oprot.writeFieldEnd()
        if self.privileges is not None:
            oprot.writeFieldBegin('privileges', TType.SET, 6)
            oprot.writeSetBegin(TType.STRUCT, len(self.privileges))
            for iter48 in self.privileges:
                iter48.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.roleName is None:
            raise TProtocolException(message='Required field roleName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAlterSentryRoleRevokePrivilegeResponse(object):
    """
    Attributes:
     - status
    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAlterSentryRoleRevokePrivilegeResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TListSentryRolesRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - groupName
    """


    def __init__(self, protocol_version=2, requestorUserName=None, groupName=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.groupName = groupName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.groupName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TListSentryRolesRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.groupName is not None:
            oprot.writeFieldBegin('groupName', TType.STRING, 3)
            oprot.writeString(self.groupName.encode('utf-8') if sys.version_info[0] == 2 else self.groupName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TListSentryRolesForUserRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - userName
    """


    def __init__(self, protocol_version=1, requestorUserName=None, userName=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.userName = userName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TListSentryRolesForUserRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 3)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.userName is None:
            raise TProtocolException(message='Required field userName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryRole(object):
    """
    Attributes:
     - roleName
     - groups
     - grantorPrincipal
    """


    def __init__(self, roleName=None, groups=None, grantorPrincipal=None,):
        self.roleName = roleName
        self.groups = groups
        self.grantorPrincipal = grantorPrincipal

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.roleName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.groups = set()
                    (_etype52, _size49) = iprot.readSetBegin()
                    for _i53 in range(_size49):
                        _elem54 = TSentryGroup()
                        _elem54.read(iprot)
                        self.groups.add(_elem54)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.grantorPrincipal = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryRole')
        if self.roleName is not None:
            oprot.writeFieldBegin('roleName', TType.STRING, 1)
            oprot.writeString(self.roleName.encode('utf-8') if sys.version_info[0] == 2 else self.roleName)
            oprot.writeFieldEnd()
        if self.groups is not None:
            oprot.writeFieldBegin('groups', TType.SET, 2)
            oprot.writeSetBegin(TType.STRUCT, len(self.groups))
            for iter55 in self.groups:
                iter55.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.grantorPrincipal is not None:
            oprot.writeFieldBegin('grantorPrincipal', TType.STRING, 3)
            oprot.writeString(self.grantorPrincipal.encode('utf-8') if sys.version_info[0] == 2 else self.grantorPrincipal)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.roleName is None:
            raise TProtocolException(message='Required field roleName is unset!')
        if self.groups is None:
            raise TProtocolException(message='Required field groups is unset!')
        if self.grantorPrincipal is None:
            raise TProtocolException(message='Required field grantorPrincipal is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TListSentryRolesResponse(object):
    """
    Attributes:
     - status
     - roles
    """


    def __init__(self, status=None, roles=None,):
        self.status = status
        self.roles = roles

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.roles = set()
                    (_etype59, _size56) = iprot.readSetBegin()
                    for _i60 in range(_size56):
                        _elem61 = TSentryRole()
                        _elem61.read(iprot)
                        self.roles.add(_elem61)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TListSentryRolesResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.roles is not None:
            oprot.writeFieldBegin('roles', TType.SET, 2)
            oprot.writeSetBegin(TType.STRUCT, len(self.roles))
            for iter62 in self.roles:
                iter62.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryAuthorizable(object):
    """
    Attributes:
     - server
     - uri
     - db
     - table
     - column
    """


    def __init__(self, server=None, uri=None, db=None, table=None, column=None,):
        self.server = server
        self.uri = uri
        self.db = db
        self.table = table
        self.column = column

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.server = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.uri = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.db = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.table = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.column = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryAuthorizable')
        if self.server is not None:
            oprot.writeFieldBegin('server', TType.STRING, 1)
            oprot.writeString(self.server.encode('utf-8') if sys.version_info[0] == 2 else self.server)
            oprot.writeFieldEnd()
        if self.uri is not None:
            oprot.writeFieldBegin('uri', TType.STRING, 2)
            oprot.writeString(self.uri.encode('utf-8') if sys.version_info[0] == 2 else self.uri)
            oprot.writeFieldEnd()
        if self.db is not None:
            oprot.writeFieldBegin('db', TType.STRING, 3)
            oprot.writeString(self.db.encode('utf-8') if sys.version_info[0] == 2 else self.db)
            oprot.writeFieldEnd()
        if self.table is not None:
            oprot.writeFieldBegin('table', TType.STRING, 4)
            oprot.writeString(self.table.encode('utf-8') if sys.version_info[0] == 2 else self.table)
            oprot.writeFieldEnd()
        if self.column is not None:
            oprot.writeFieldBegin('column', TType.STRING, 5)
            oprot.writeString(self.column.encode('utf-8') if sys.version_info[0] == 2 else self.column)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.server is None:
            raise TProtocolException(message='Required field server is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TListSentryPrivilegesRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - roleName
     - authorizableHierarchy
     - principalName
    """


    def __init__(self, protocol_version=2, requestorUserName=None, roleName=None, authorizableHierarchy=None, principalName=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.roleName = roleName
        self.authorizableHierarchy = authorizableHierarchy
        self.principalName = principalName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.roleName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.authorizableHierarchy = TSentryAuthorizable()
                    self.authorizableHierarchy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.principalName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TListSentryPrivilegesRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.roleName is not None:
            oprot.writeFieldBegin('roleName', TType.STRING, 4)
            oprot.writeString(self.roleName.encode('utf-8') if sys.version_info[0] == 2 else self.roleName)
            oprot.writeFieldEnd()
        if self.authorizableHierarchy is not None:
            oprot.writeFieldBegin('authorizableHierarchy', TType.STRUCT, 5)
            self.authorizableHierarchy.write(oprot)
            oprot.writeFieldEnd()
        if self.principalName is not None:
            oprot.writeFieldBegin('principalName', TType.STRING, 6)
            oprot.writeString(self.principalName.encode('utf-8') if sys.version_info[0] == 2 else self.principalName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.roleName is None:
            raise TProtocolException(message='Required field roleName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TListSentryPrivilegesResponse(object):
    """
    Attributes:
     - status
     - privileges
    """


    def __init__(self, status=None, privileges=None,):
        self.status = status
        self.privileges = privileges

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.privileges = set()
                    (_etype66, _size63) = iprot.readSetBegin()
                    for _i67 in range(_size63):
                        _elem68 = TSentryPrivilege()
                        _elem68.read(iprot)
                        self.privileges.add(_elem68)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TListSentryPrivilegesResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.privileges is not None:
            oprot.writeFieldBegin('privileges', TType.SET, 2)
            oprot.writeSetBegin(TType.STRUCT, len(self.privileges))
            for iter69 in self.privileges:
                iter69.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDropPrivilegesRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - authorizable
    """


    def __init__(self, protocol_version=2, requestorUserName=None, authorizable=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.authorizable = authorizable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.authorizable = TSentryAuthorizable()
                    self.authorizable.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDropPrivilegesRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.authorizable is not None:
            oprot.writeFieldBegin('authorizable', TType.STRUCT, 3)
            self.authorizable.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.authorizable is None:
            raise TProtocolException(message='Required field authorizable is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDropPrivilegesResponse(object):
    """
    Attributes:
     - status
    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDropPrivilegesResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRenamePrivilegesRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - oldAuthorizable
     - newAuthorizable
    """


    def __init__(self, protocol_version=2, requestorUserName=None, oldAuthorizable=None, newAuthorizable=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.oldAuthorizable = oldAuthorizable
        self.newAuthorizable = newAuthorizable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.oldAuthorizable = TSentryAuthorizable()
                    self.oldAuthorizable.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.newAuthorizable = TSentryAuthorizable()
                    self.newAuthorizable.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRenamePrivilegesRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.oldAuthorizable is not None:
            oprot.writeFieldBegin('oldAuthorizable', TType.STRUCT, 3)
            self.oldAuthorizable.write(oprot)
            oprot.writeFieldEnd()
        if self.newAuthorizable is not None:
            oprot.writeFieldBegin('newAuthorizable', TType.STRUCT, 4)
            self.newAuthorizable.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.oldAuthorizable is None:
            raise TProtocolException(message='Required field oldAuthorizable is unset!')
        if self.newAuthorizable is None:
            raise TProtocolException(message='Required field newAuthorizable is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRenamePrivilegesResponse(object):
    """
    Attributes:
     - status
    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRenamePrivilegesResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryActiveRoleSet(object):
    """
    Attributes:
     - all
     - roles
    """


    def __init__(self, all=None, roles=None,):
        self.all = all
        self.roles = roles

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.all = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.roles = set()
                    (_etype73, _size70) = iprot.readSetBegin()
                    for _i74 in range(_size70):
                        _elem75 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.roles.add(_elem75)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryActiveRoleSet')
        if self.all is not None:
            oprot.writeFieldBegin('all', TType.BOOL, 1)
            oprot.writeBool(self.all)
            oprot.writeFieldEnd()
        if self.roles is not None:
            oprot.writeFieldBegin('roles', TType.SET, 2)
            oprot.writeSetBegin(TType.STRING, len(self.roles))
            for iter76 in self.roles:
                oprot.writeString(iter76.encode('utf-8') if sys.version_info[0] == 2 else iter76)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.all is None:
            raise TProtocolException(message='Required field all is unset!')
        if self.roles is None:
            raise TProtocolException(message='Required field roles is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TListSentryPrivilegesForProviderRequest(object):
    """
    Attributes:
     - protocol_version
     - groups
     - roleSet
     - authorizableHierarchy
     - users
    """


    def __init__(self, protocol_version=2, groups=None, roleSet=None, authorizableHierarchy=None, users=None,):
        self.protocol_version = protocol_version
        self.groups = groups
        self.roleSet = roleSet
        self.authorizableHierarchy = authorizableHierarchy
        self.users = users

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.groups = set()
                    (_etype80, _size77) = iprot.readSetBegin()
                    for _i81 in range(_size77):
                        _elem82 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.groups.add(_elem82)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.roleSet = TSentryActiveRoleSet()
                    self.roleSet.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.authorizableHierarchy = TSentryAuthorizable()
                    self.authorizableHierarchy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.SET:
                    self.users = set()
                    (_etype86, _size83) = iprot.readSetBegin()
                    for _i87 in range(_size83):
                        _elem88 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.users.add(_elem88)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TListSentryPrivilegesForProviderRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.groups is not None:
            oprot.writeFieldBegin('groups', TType.SET, 2)
            oprot.writeSetBegin(TType.STRING, len(self.groups))
            for iter89 in self.groups:
                oprot.writeString(iter89.encode('utf-8') if sys.version_info[0] == 2 else iter89)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.roleSet is not None:
            oprot.writeFieldBegin('roleSet', TType.STRUCT, 3)
            self.roleSet.write(oprot)
            oprot.writeFieldEnd()
        if self.authorizableHierarchy is not None:
            oprot.writeFieldBegin('authorizableHierarchy', TType.STRUCT, 4)
            self.authorizableHierarchy.write(oprot)
            oprot.writeFieldEnd()
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.SET, 5)
            oprot.writeSetBegin(TType.STRING, len(self.users))
            for iter90 in self.users:
                oprot.writeString(iter90.encode('utf-8') if sys.version_info[0] == 2 else iter90)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.groups is None:
            raise TProtocolException(message='Required field groups is unset!')
        if self.roleSet is None:
            raise TProtocolException(message='Required field roleSet is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TListSentryPrivilegesForProviderResponse(object):
    """
    Attributes:
     - status
     - privileges
    """


    def __init__(self, status=None, privileges=None,):
        self.status = status
        self.privileges = privileges

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.privileges = set()
                    (_etype94, _size91) = iprot.readSetBegin()
                    for _i95 in range(_size91):
                        _elem96 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.privileges.add(_elem96)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TListSentryPrivilegesForProviderResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.privileges is not None:
            oprot.writeFieldBegin('privileges', TType.SET, 2)
            oprot.writeSetBegin(TType.STRING, len(self.privileges))
            for iter97 in self.privileges:
                oprot.writeString(iter97.encode('utf-8') if sys.version_info[0] == 2 else iter97)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.privileges is None:
            raise TProtocolException(message='Required field privileges is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryPrivilegeMap(object):
    """
    Attributes:
     - privilegeMap
    """


    def __init__(self, privilegeMap=None,):
        self.privilegeMap = privilegeMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.privilegeMap = {}
                    (_ktype99, _vtype100, _size98) = iprot.readMapBegin()
                    for _i102 in range(_size98):
                        _key103 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val104 = set()
                        (_etype108, _size105) = iprot.readSetBegin()
                        for _i109 in range(_size105):
                            _elem110 = TSentryPrivilege()
                            _elem110.read(iprot)
                            _val104.add(_elem110)
                        iprot.readSetEnd()
                        self.privilegeMap[_key103] = _val104
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryPrivilegeMap')
        if self.privilegeMap is not None:
            oprot.writeFieldBegin('privilegeMap', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.SET, len(self.privilegeMap))
            for kiter111, viter112 in self.privilegeMap.items():
                oprot.writeString(kiter111.encode('utf-8') if sys.version_info[0] == 2 else kiter111)
                oprot.writeSetBegin(TType.STRUCT, len(viter112))
                for iter113 in viter112:
                    iter113.write(oprot)
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.privilegeMap is None:
            raise TProtocolException(message='Required field privilegeMap is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TListSentryPrivilegesByAuthRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - authorizableSet
     - groups
     - roleSet
     - users
    """


    def __init__(self, protocol_version=2, requestorUserName=None, authorizableSet=None, groups=None, roleSet=None, users=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.authorizableSet = authorizableSet
        self.groups = groups
        self.roleSet = roleSet
        self.users = users

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.authorizableSet = set()
                    (_etype117, _size114) = iprot.readSetBegin()
                    for _i118 in range(_size114):
                        _elem119 = TSentryAuthorizable()
                        _elem119.read(iprot)
                        self.authorizableSet.add(_elem119)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.groups = set()
                    (_etype123, _size120) = iprot.readSetBegin()
                    for _i124 in range(_size120):
                        _elem125 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.groups.add(_elem125)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.roleSet = TSentryActiveRoleSet()
                    self.roleSet.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.SET:
                    self.users = set()
                    (_etype129, _size126) = iprot.readSetBegin()
                    for _i130 in range(_size126):
                        _elem131 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.users.add(_elem131)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TListSentryPrivilegesByAuthRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.authorizableSet is not None:
            oprot.writeFieldBegin('authorizableSet', TType.SET, 3)
            oprot.writeSetBegin(TType.STRUCT, len(self.authorizableSet))
            for iter132 in self.authorizableSet:
                iter132.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.groups is not None:
            oprot.writeFieldBegin('groups', TType.SET, 4)
            oprot.writeSetBegin(TType.STRING, len(self.groups))
            for iter133 in self.groups:
                oprot.writeString(iter133.encode('utf-8') if sys.version_info[0] == 2 else iter133)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.roleSet is not None:
            oprot.writeFieldBegin('roleSet', TType.STRUCT, 5)
            self.roleSet.write(oprot)
            oprot.writeFieldEnd()
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.SET, 6)
            oprot.writeSetBegin(TType.STRING, len(self.users))
            for iter134 in self.users:
                oprot.writeString(iter134.encode('utf-8') if sys.version_info[0] == 2 else iter134)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.authorizableSet is None:
            raise TProtocolException(message='Required field authorizableSet is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TListSentryPrivilegesByAuthResponse(object):
    """
    Attributes:
     - status
     - privilegesMapByAuth
     - privilegesMapByAuthForUsers
    """


    def __init__(self, status=None, privilegesMapByAuth=None, privilegesMapByAuthForUsers=None,):
        self.status = status
        self.privilegesMapByAuth = privilegesMapByAuth
        self.privilegesMapByAuthForUsers = privilegesMapByAuthForUsers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.privilegesMapByAuth = {}
                    (_ktype136, _vtype137, _size135) = iprot.readMapBegin()
                    for _i139 in range(_size135):
                        _key140 = TSentryAuthorizable()
                        _key140.read(iprot)
                        _val141 = TSentryPrivilegeMap()
                        _val141.read(iprot)
                        self.privilegesMapByAuth[_key140] = _val141
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.privilegesMapByAuthForUsers = {}
                    (_ktype143, _vtype144, _size142) = iprot.readMapBegin()
                    for _i146 in range(_size142):
                        _key147 = TSentryAuthorizable()
                        _key147.read(iprot)
                        _val148 = TSentryPrivilegeMap()
                        _val148.read(iprot)
                        self.privilegesMapByAuthForUsers[_key147] = _val148
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TListSentryPrivilegesByAuthResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.privilegesMapByAuth is not None:
            oprot.writeFieldBegin('privilegesMapByAuth', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRUCT, TType.STRUCT, len(self.privilegesMapByAuth))
            for kiter149, viter150 in self.privilegesMapByAuth.items():
                kiter149.write(oprot)
                viter150.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.privilegesMapByAuthForUsers is not None:
            oprot.writeFieldBegin('privilegesMapByAuthForUsers', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRUCT, TType.STRUCT, len(self.privilegesMapByAuthForUsers))
            for kiter151, viter152 in self.privilegesMapByAuthForUsers.items():
                kiter151.write(oprot)
                viter152.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryConfigValueRequest(object):
    """
    Attributes:
     - protocol_version
     - propertyName
     - defaultValue
    """


    def __init__(self, protocol_version=2, propertyName=None, defaultValue=None,):
        self.protocol_version = protocol_version
        self.propertyName = propertyName
        self.defaultValue = defaultValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.propertyName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.defaultValue = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryConfigValueRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.propertyName is not None:
            oprot.writeFieldBegin('propertyName', TType.STRING, 2)
            oprot.writeString(self.propertyName.encode('utf-8') if sys.version_info[0] == 2 else self.propertyName)
            oprot.writeFieldEnd()
        if self.defaultValue is not None:
            oprot.writeFieldBegin('defaultValue', TType.STRING, 3)
            oprot.writeString(self.defaultValue.encode('utf-8') if sys.version_info[0] == 2 else self.defaultValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.propertyName is None:
            raise TProtocolException(message='Required field propertyName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryConfigValueResponse(object):
    """
    Attributes:
     - status
     - value
    """


    def __init__(self, status=None, value=None,):
        self.status = status
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryConfigValueResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 2)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryMappingData(object):
    """
    Attributes:
     - groupRolesMap
     - rolePrivilegesMap
     - userRolesMap
    """


    def __init__(self, groupRolesMap=None, rolePrivilegesMap=None, userRolesMap=None,):
        self.groupRolesMap = groupRolesMap
        self.rolePrivilegesMap = rolePrivilegesMap
        self.userRolesMap = userRolesMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.groupRolesMap = {}
                    (_ktype154, _vtype155, _size153) = iprot.readMapBegin()
                    for _i157 in range(_size153):
                        _key158 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val159 = set()
                        (_etype163, _size160) = iprot.readSetBegin()
                        for _i164 in range(_size160):
                            _elem165 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val159.add(_elem165)
                        iprot.readSetEnd()
                        self.groupRolesMap[_key158] = _val159
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.rolePrivilegesMap = {}
                    (_ktype167, _vtype168, _size166) = iprot.readMapBegin()
                    for _i170 in range(_size166):
                        _key171 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val172 = set()
                        (_etype176, _size173) = iprot.readSetBegin()
                        for _i177 in range(_size173):
                            _elem178 = TSentryPrivilege()
                            _elem178.read(iprot)
                            _val172.add(_elem178)
                        iprot.readSetEnd()
                        self.rolePrivilegesMap[_key171] = _val172
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.userRolesMap = {}
                    (_ktype180, _vtype181, _size179) = iprot.readMapBegin()
                    for _i183 in range(_size179):
                        _key184 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val185 = set()
                        (_etype189, _size186) = iprot.readSetBegin()
                        for _i190 in range(_size186):
                            _elem191 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val185.add(_elem191)
                        iprot.readSetEnd()
                        self.userRolesMap[_key184] = _val185
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryMappingData')
        if self.groupRolesMap is not None:
            oprot.writeFieldBegin('groupRolesMap', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.SET, len(self.groupRolesMap))
            for kiter192, viter193 in self.groupRolesMap.items():
                oprot.writeString(kiter192.encode('utf-8') if sys.version_info[0] == 2 else kiter192)
                oprot.writeSetBegin(TType.STRING, len(viter193))
                for iter194 in viter193:
                    oprot.writeString(iter194.encode('utf-8') if sys.version_info[0] == 2 else iter194)
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.rolePrivilegesMap is not None:
            oprot.writeFieldBegin('rolePrivilegesMap', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.SET, len(self.rolePrivilegesMap))
            for kiter195, viter196 in self.rolePrivilegesMap.items():
                oprot.writeString(kiter195.encode('utf-8') if sys.version_info[0] == 2 else kiter195)
                oprot.writeSetBegin(TType.STRUCT, len(viter196))
                for iter197 in viter196:
                    iter197.write(oprot)
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.userRolesMap is not None:
            oprot.writeFieldBegin('userRolesMap', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.SET, len(self.userRolesMap))
            for kiter198, viter199 in self.userRolesMap.items():
                oprot.writeString(kiter198.encode('utf-8') if sys.version_info[0] == 2 else kiter198)
                oprot.writeSetBegin(TType.STRING, len(viter199))
                for iter200 in viter199:
                    oprot.writeString(iter200.encode('utf-8') if sys.version_info[0] == 2 else iter200)
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryExportMappingDataRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - objectPath
    """


    def __init__(self, protocol_version=1, requestorUserName=None, objectPath=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.objectPath = objectPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.objectPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryExportMappingDataRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.objectPath is not None:
            oprot.writeFieldBegin('objectPath', TType.STRING, 3)
            oprot.writeString(self.objectPath.encode('utf-8') if sys.version_info[0] == 2 else self.objectPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryExportMappingDataResponse(object):
    """
    Attributes:
     - status
     - mappingData
    """


    def __init__(self, status=None, mappingData=None,):
        self.status = status
        self.mappingData = mappingData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.mappingData = TSentryMappingData()
                    self.mappingData.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryExportMappingDataResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.mappingData is not None:
            oprot.writeFieldBegin('mappingData', TType.STRUCT, 2)
            self.mappingData.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.mappingData is None:
            raise TProtocolException(message='Required field mappingData is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryImportMappingDataRequest(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - overwriteRole
     - mappingData
    """


    def __init__(self, protocol_version=1, requestorUserName=None, overwriteRole=False, mappingData=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.overwriteRole = overwriteRole
        self.mappingData = mappingData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.overwriteRole = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.mappingData = TSentryMappingData()
                    self.mappingData.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryImportMappingDataRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.overwriteRole is not None:
            oprot.writeFieldBegin('overwriteRole', TType.BOOL, 3)
            oprot.writeBool(self.overwriteRole)
            oprot.writeFieldEnd()
        if self.mappingData is not None:
            oprot.writeFieldBegin('mappingData', TType.STRUCT, 4)
            self.mappingData.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.overwriteRole is None:
            raise TProtocolException(message='Required field overwriteRole is unset!')
        if self.mappingData is None:
            raise TProtocolException(message='Required field mappingData is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryImportMappingDataResponse(object):
    """
    Attributes:
     - status
    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryImportMappingDataResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentrySyncIDRequest(object):
    """
    Attributes:
     - protocol_version
     - id
    """


    def __init__(self, protocol_version=2, id=None,):
        self.protocol_version = protocol_version
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentrySyncIDRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 2)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentrySyncIDResponse(object):
    """
    Attributes:
     - status
     - id
    """


    def __init__(self, status=None, id=None,):
        self.status = status
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentrySyncIDResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 2)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryHmsEventNotification(object):
    """
    Attributes:
     - protocol_version
     - requestorUserName
     - id
     - eventType
     - authorizable
     - ownerType
     - ownerName
    """


    def __init__(self, protocol_version=2, requestorUserName=None, id=None, eventType=None, authorizable=None, ownerType=None, ownerName=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName
        self.id = id
        self.eventType = eventType
        self.authorizable = authorizable
        self.ownerType = ownerType
        self.ownerName = ownerName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.eventType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.authorizable = TSentryAuthorizable()
                    self.authorizable.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.ownerType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.ownerName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryHmsEventNotification')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 3)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.eventType is not None:
            oprot.writeFieldBegin('eventType', TType.STRING, 4)
            oprot.writeString(self.eventType.encode('utf-8') if sys.version_info[0] == 2 else self.eventType)
            oprot.writeFieldEnd()
        if self.authorizable is not None:
            oprot.writeFieldBegin('authorizable', TType.STRUCT, 5)
            self.authorizable.write(oprot)
            oprot.writeFieldEnd()
        if self.ownerType is not None:
            oprot.writeFieldBegin('ownerType', TType.I32, 6)
            oprot.writeI32(self.ownerType)
            oprot.writeFieldEnd()
        if self.ownerName is not None:
            oprot.writeFieldBegin('ownerName', TType.STRING, 7)
            oprot.writeString(self.ownerName.encode('utf-8') if sys.version_info[0] == 2 else self.ownerName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.eventType is None:
            raise TProtocolException(message='Required field eventType is unset!')
        if self.authorizable is None:
            raise TProtocolException(message='Required field authorizable is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryHmsEventNotificationResponse(object):
    """
    Attributes:
     - status
     - id
    """


    def __init__(self, status=None, id=None,):
        self.status = status
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryHmsEventNotificationResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 2)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryPrivilegesRequest(object):
    """
    API that requests all roles and users privileges from the Sentry server.


    Attributes:
     - protocol_version
     - requestorUserName
    """


    def __init__(self, protocol_version=2, requestorUserName=None,):
        self.protocol_version = protocol_version
        self.requestorUserName = requestorUserName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.protocol_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.requestorUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryPrivilegesRequest')
        if self.protocol_version is not None:
            oprot.writeFieldBegin('protocol_version', TType.I32, 1)
            oprot.writeI32(self.protocol_version)
            oprot.writeFieldEnd()
        if self.requestorUserName is not None:
            oprot.writeFieldBegin('requestorUserName', TType.STRING, 2)
            oprot.writeString(self.requestorUserName.encode('utf-8') if sys.version_info[0] == 2 else self.requestorUserName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.protocol_version is None:
            raise TProtocolException(message='Required field protocol_version is unset!')
        if self.requestorUserName is None:
            raise TProtocolException(message='Required field requestorUserName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSentryPrivilegesResponse(object):
    """
    API that returns either all users or roles privileges found on the Sentry server.

    The response returns a mapping object that maps the role or user name to the privileges
    they have in the server. An empty set of privileges may be returned to each role or user
    name. Null values are not returned.


    Attributes:
     - status
     - privilegesMap
    """


    def __init__(self, status=None, privilegesMap=None,):
        self.status = status
        self.privilegesMap = privilegesMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = sentry_common_service.ttypes.TSentryResponseStatus()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.privilegesMap = {}
                    (_ktype202, _vtype203, _size201) = iprot.readMapBegin()
                    for _i205 in range(_size201):
                        _key206 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val207 = set()
                        (_etype211, _size208) = iprot.readSetBegin()
                        for _i212 in range(_size208):
                            _elem213 = TSentryPrivilege()
                            _elem213.read(iprot)
                            _val207.add(_elem213)
                        iprot.readSetEnd()
                        self.privilegesMap[_key206] = _val207
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSentryPrivilegesResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.privilegesMap is not None:
            oprot.writeFieldBegin('privilegesMap', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.SET, len(self.privilegesMap))
            for kiter214, viter215 in self.privilegesMap.items():
                oprot.writeString(kiter214.encode('utf-8') if sys.version_info[0] == 2 else kiter214)
                oprot.writeSetBegin(TType.STRUCT, len(viter215))
                for iter216 in viter215:
                    iter216.write(oprot)
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.privilegesMap is None:
            raise TProtocolException(message='Required field privilegesMap is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TSentryPrivilege)
TSentryPrivilege.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'privilegeScope', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'serverName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'dbName', 'UTF8', "", ),  # 4
    (5, TType.STRING, 'tableName', 'UTF8', "", ),  # 5
    (6, TType.STRING, 'URI', 'UTF8', "", ),  # 6
    (7, TType.STRING, 'action', 'UTF8', "", ),  # 7
    (8, TType.I64, 'createTime', None, None, ),  # 8
    (9, TType.I32, 'grantOption', None, 0, ),  # 9
    (10, TType.STRING, 'columnName', 'UTF8', "", ),  # 10
)
all_structs.append(TSentryGroup)
TSentryGroup.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'groupName', 'UTF8', None, ),  # 1
)
all_structs.append(TCreateSentryRoleRequest)
TCreateSentryRoleRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'roleName', 'UTF8', None, ),  # 3
)
all_structs.append(TCreateSentryRoleResponse)
TCreateSentryRoleResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
)
all_structs.append(TDropSentryRoleRequest)
TDropSentryRoleRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'roleName', 'UTF8', None, ),  # 3
)
all_structs.append(TDropSentryRoleResponse)
TDropSentryRoleResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
)
all_structs.append(TAlterSentryRoleAddGroupsRequest)
TAlterSentryRoleAddGroupsRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'roleName', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.SET, 'groups', (TType.STRUCT, [TSentryGroup, None], False), None, ),  # 5
)
all_structs.append(TAlterSentryRoleAddGroupsResponse)
TAlterSentryRoleAddGroupsResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
)
all_structs.append(TAlterSentryRoleAddUsersRequest)
TAlterSentryRoleAddUsersRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 1, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'roleName', 'UTF8', None, ),  # 3
    (4, TType.SET, 'users', (TType.STRING, 'UTF8', False), None, ),  # 4
)
all_structs.append(TAlterSentryRoleAddUsersResponse)
TAlterSentryRoleAddUsersResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
)
all_structs.append(TAlterSentryRoleDeleteGroupsRequest)
TAlterSentryRoleDeleteGroupsRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'roleName', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.SET, 'groups', (TType.STRUCT, [TSentryGroup, None], False), None, ),  # 5
)
all_structs.append(TAlterSentryRoleDeleteGroupsResponse)
TAlterSentryRoleDeleteGroupsResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
)
all_structs.append(TAlterSentryRoleDeleteUsersRequest)
TAlterSentryRoleDeleteUsersRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 1, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'roleName', 'UTF8', None, ),  # 3
    (4, TType.SET, 'users', (TType.STRING, 'UTF8', False), None, ),  # 4
)
all_structs.append(TAlterSentryRoleDeleteUsersResponse)
TAlterSentryRoleDeleteUsersResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
)
all_structs.append(TAlterSentryRoleGrantPrivilegeRequest)
TAlterSentryRoleGrantPrivilegeRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'roleName', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.STRUCT, 'privilege', [TSentryPrivilege, None], None, ),  # 5
    (6, TType.SET, 'privileges', (TType.STRUCT, [TSentryPrivilege, None], False), None, ),  # 6
)
all_structs.append(TAlterSentryRoleGrantPrivilegeResponse)
TAlterSentryRoleGrantPrivilegeResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'privilege', [TSentryPrivilege, None], None, ),  # 2
    (3, TType.SET, 'privileges', (TType.STRUCT, [TSentryPrivilege, None], False), None, ),  # 3
)
all_structs.append(TAlterSentryRoleRevokePrivilegeRequest)
TAlterSentryRoleRevokePrivilegeRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'roleName', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.STRUCT, 'privilege', [TSentryPrivilege, None], None, ),  # 5
    (6, TType.SET, 'privileges', (TType.STRUCT, [TSentryPrivilege, None], False), None, ),  # 6
)
all_structs.append(TAlterSentryRoleRevokePrivilegeResponse)
TAlterSentryRoleRevokePrivilegeResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
)
all_structs.append(TListSentryRolesRequest)
TListSentryRolesRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'groupName', 'UTF8', None, ),  # 3
)
all_structs.append(TListSentryRolesForUserRequest)
TListSentryRolesForUserRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 1, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'userName', 'UTF8', None, ),  # 3
)
all_structs.append(TSentryRole)
TSentryRole.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'roleName', 'UTF8', None, ),  # 1
    (2, TType.SET, 'groups', (TType.STRUCT, [TSentryGroup, None], False), None, ),  # 2
    (3, TType.STRING, 'grantorPrincipal', 'UTF8', None, ),  # 3
)
all_structs.append(TListSentryRolesResponse)
TListSentryRolesResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
    (2, TType.SET, 'roles', (TType.STRUCT, [TSentryRole, None], False), None, ),  # 2
)
all_structs.append(TSentryAuthorizable)
TSentryAuthorizable.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'server', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'uri', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'db', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'table', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'column', 'UTF8', None, ),  # 5
)
all_structs.append(TListSentryPrivilegesRequest)
TListSentryPrivilegesRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    None,  # 3
    (4, TType.STRING, 'roleName', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'authorizableHierarchy', [TSentryAuthorizable, None], None, ),  # 5
    (6, TType.STRING, 'principalName', 'UTF8', None, ),  # 6
)
all_structs.append(TListSentryPrivilegesResponse)
TListSentryPrivilegesResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
    (2, TType.SET, 'privileges', (TType.STRUCT, [TSentryPrivilege, None], False), None, ),  # 2
)
all_structs.append(TDropPrivilegesRequest)
TDropPrivilegesRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'authorizable', [TSentryAuthorizable, None], None, ),  # 3
)
all_structs.append(TDropPrivilegesResponse)
TDropPrivilegesResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
)
all_structs.append(TRenamePrivilegesRequest)
TRenamePrivilegesRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'oldAuthorizable', [TSentryAuthorizable, None], None, ),  # 3
    (4, TType.STRUCT, 'newAuthorizable', [TSentryAuthorizable, None], None, ),  # 4
)
all_structs.append(TRenamePrivilegesResponse)
TRenamePrivilegesResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
)
all_structs.append(TSentryActiveRoleSet)
TSentryActiveRoleSet.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'all', None, None, ),  # 1
    (2, TType.SET, 'roles', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(TListSentryPrivilegesForProviderRequest)
TListSentryPrivilegesForProviderRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.SET, 'groups', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRUCT, 'roleSet', [TSentryActiveRoleSet, None], None, ),  # 3
    (4, TType.STRUCT, 'authorizableHierarchy', [TSentryAuthorizable, None], None, ),  # 4
    (5, TType.SET, 'users', (TType.STRING, 'UTF8', False), None, ),  # 5
)
all_structs.append(TListSentryPrivilegesForProviderResponse)
TListSentryPrivilegesForProviderResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
    (2, TType.SET, 'privileges', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(TSentryPrivilegeMap)
TSentryPrivilegeMap.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'privilegeMap', (TType.STRING, 'UTF8', TType.SET, (TType.STRUCT, [TSentryPrivilege, None], False), False), None, ),  # 1
)
all_structs.append(TListSentryPrivilegesByAuthRequest)
TListSentryPrivilegesByAuthRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.SET, 'authorizableSet', (TType.STRUCT, [TSentryAuthorizable, None], False), None, ),  # 3
    (4, TType.SET, 'groups', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRUCT, 'roleSet', [TSentryActiveRoleSet, None], None, ),  # 5
    (6, TType.SET, 'users', (TType.STRING, 'UTF8', False), None, ),  # 6
)
all_structs.append(TListSentryPrivilegesByAuthResponse)
TListSentryPrivilegesByAuthResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
    (2, TType.MAP, 'privilegesMapByAuth', (TType.STRUCT, [TSentryAuthorizable, None], TType.STRUCT, [TSentryPrivilegeMap, None], False), None, ),  # 2
    (3, TType.MAP, 'privilegesMapByAuthForUsers', (TType.STRUCT, [TSentryAuthorizable, None], TType.STRUCT, [TSentryPrivilegeMap, None], False), None, ),  # 3
)
all_structs.append(TSentryConfigValueRequest)
TSentryConfigValueRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.STRING, 'propertyName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'defaultValue', 'UTF8', None, ),  # 3
)
all_structs.append(TSentryConfigValueResponse)
TSentryConfigValueResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
    (2, TType.STRING, 'value', 'UTF8', None, ),  # 2
)
all_structs.append(TSentryMappingData)
TSentryMappingData.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'groupRolesMap', (TType.STRING, 'UTF8', TType.SET, (TType.STRING, 'UTF8', False), False), None, ),  # 1
    (2, TType.MAP, 'rolePrivilegesMap', (TType.STRING, 'UTF8', TType.SET, (TType.STRUCT, [TSentryPrivilege, None], False), False), None, ),  # 2
    (3, TType.MAP, 'userRolesMap', (TType.STRING, 'UTF8', TType.SET, (TType.STRING, 'UTF8', False), False), None, ),  # 3
)
all_structs.append(TSentryExportMappingDataRequest)
TSentryExportMappingDataRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 1, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'objectPath', 'UTF8', None, ),  # 3
)
all_structs.append(TSentryExportMappingDataResponse)
TSentryExportMappingDataResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
    (2, TType.STRUCT, 'mappingData', [TSentryMappingData, None], None, ),  # 2
)
all_structs.append(TSentryImportMappingDataRequest)
TSentryImportMappingDataRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 1, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'overwriteRole', None, False, ),  # 3
    (4, TType.STRUCT, 'mappingData', [TSentryMappingData, None], None, ),  # 4
)
all_structs.append(TSentryImportMappingDataResponse)
TSentryImportMappingDataResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
)
all_structs.append(TSentrySyncIDRequest)
TSentrySyncIDRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.I64, 'id', None, None, ),  # 2
)
all_structs.append(TSentrySyncIDResponse)
TSentrySyncIDResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
    (2, TType.I64, 'id', None, None, ),  # 2
)
all_structs.append(TSentryHmsEventNotification)
TSentryHmsEventNotification.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
    (3, TType.I64, 'id', None, None, ),  # 3
    (4, TType.STRING, 'eventType', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'authorizable', [TSentryAuthorizable, None], None, ),  # 5
    (6, TType.I32, 'ownerType', None, None, ),  # 6
    (7, TType.STRING, 'ownerName', 'UTF8', None, ),  # 7
)
all_structs.append(TSentryHmsEventNotificationResponse)
TSentryHmsEventNotificationResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
    (2, TType.I64, 'id', None, None, ),  # 2
)
all_structs.append(TSentryPrivilegesRequest)
TSentryPrivilegesRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'protocol_version', None, 2, ),  # 1
    (2, TType.STRING, 'requestorUserName', 'UTF8', None, ),  # 2
)
all_structs.append(TSentryPrivilegesResponse)
TSentryPrivilegesResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [sentry_common_service.ttypes.TSentryResponseStatus, None], None, ),  # 1
    (2, TType.MAP, 'privilegesMap', (TType.STRING, 'UTF8', TType.SET, (TType.STRUCT, [TSentryPrivilege, None], False), False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
