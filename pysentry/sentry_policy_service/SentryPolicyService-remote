#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from sentry_policy_service import SentryPolicyService
from sentry_policy_service.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  TCreateSentryRoleResponse create_sentry_role(TCreateSentryRoleRequest request)')
    print('  TDropSentryRoleResponse drop_sentry_role(TDropSentryRoleRequest request)')
    print('  TAlterSentryRoleGrantPrivilegeResponse alter_sentry_role_grant_privilege(TAlterSentryRoleGrantPrivilegeRequest request)')
    print('  TAlterSentryRoleRevokePrivilegeResponse alter_sentry_role_revoke_privilege(TAlterSentryRoleRevokePrivilegeRequest request)')
    print('  TAlterSentryRoleAddGroupsResponse alter_sentry_role_add_groups(TAlterSentryRoleAddGroupsRequest request)')
    print('  TAlterSentryRoleDeleteGroupsResponse alter_sentry_role_delete_groups(TAlterSentryRoleDeleteGroupsRequest request)')
    print('  TAlterSentryRoleAddUsersResponse alter_sentry_role_add_users(TAlterSentryRoleAddUsersRequest request)')
    print('  TAlterSentryRoleDeleteUsersResponse alter_sentry_role_delete_users(TAlterSentryRoleDeleteUsersRequest request)')
    print('  TListSentryRolesResponse list_sentry_roles_by_group(TListSentryRolesRequest request)')
    print('  TListSentryRolesResponse list_sentry_roles_by_user(TListSentryRolesForUserRequest request)')
    print('  TListSentryPrivilegesResponse list_sentry_privileges_by_role(TListSentryPrivilegesRequest request)')
    print('  TListSentryPrivilegesResponse list_sentry_privileges_by_user(TListSentryPrivilegesRequest request)')
    print('  TListSentryPrivilegesResponse list_sentry_privileges_by_user_and_itsgroups(TListSentryPrivilegesRequest request)')
    print('  TListSentryPrivilegesForProviderResponse list_sentry_privileges_for_provider(TListSentryPrivilegesForProviderRequest request)')
    print('  TDropPrivilegesResponse drop_sentry_privilege(TDropPrivilegesRequest request)')
    print('  TRenamePrivilegesResponse rename_sentry_privilege(TRenamePrivilegesRequest request)')
    print('  TListSentryPrivilegesByAuthResponse list_sentry_privileges_by_authorizable(TListSentryPrivilegesByAuthRequest request)')
    print('  TSentryConfigValueResponse get_sentry_config_value(TSentryConfigValueRequest request)')
    print('  TSentryExportMappingDataResponse export_sentry_mapping_data(TSentryExportMappingDataRequest request)')
    print('  TSentryImportMappingDataResponse import_sentry_mapping_data(TSentryImportMappingDataRequest request)')
    print('  TSentrySyncIDResponse sentry_sync_notifications(TSentrySyncIDRequest request)')
    print('  TSentryHmsEventNotificationResponse sentry_notify_hms_event(TSentryHmsEventNotification request)')
    print('  TSentryPrivilegesResponse list_roles_privileges(TSentryPrivilegesRequest request)')
    print('  TSentryPrivilegesResponse list_users_privileges(TSentryPrivilegesRequest request)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = SentryPolicyService.Client(protocol)
transport.open()

if cmd == 'create_sentry_role':
    if len(args) != 1:
        print('create_sentry_role requires 1 args')
        sys.exit(1)
    pp.pprint(client.create_sentry_role(eval(args[0]),))

elif cmd == 'drop_sentry_role':
    if len(args) != 1:
        print('drop_sentry_role requires 1 args')
        sys.exit(1)
    pp.pprint(client.drop_sentry_role(eval(args[0]),))

elif cmd == 'alter_sentry_role_grant_privilege':
    if len(args) != 1:
        print('alter_sentry_role_grant_privilege requires 1 args')
        sys.exit(1)
    pp.pprint(client.alter_sentry_role_grant_privilege(eval(args[0]),))

elif cmd == 'alter_sentry_role_revoke_privilege':
    if len(args) != 1:
        print('alter_sentry_role_revoke_privilege requires 1 args')
        sys.exit(1)
    pp.pprint(client.alter_sentry_role_revoke_privilege(eval(args[0]),))

elif cmd == 'alter_sentry_role_add_groups':
    if len(args) != 1:
        print('alter_sentry_role_add_groups requires 1 args')
        sys.exit(1)
    pp.pprint(client.alter_sentry_role_add_groups(eval(args[0]),))

elif cmd == 'alter_sentry_role_delete_groups':
    if len(args) != 1:
        print('alter_sentry_role_delete_groups requires 1 args')
        sys.exit(1)
    pp.pprint(client.alter_sentry_role_delete_groups(eval(args[0]),))

elif cmd == 'alter_sentry_role_add_users':
    if len(args) != 1:
        print('alter_sentry_role_add_users requires 1 args')
        sys.exit(1)
    pp.pprint(client.alter_sentry_role_add_users(eval(args[0]),))

elif cmd == 'alter_sentry_role_delete_users':
    if len(args) != 1:
        print('alter_sentry_role_delete_users requires 1 args')
        sys.exit(1)
    pp.pprint(client.alter_sentry_role_delete_users(eval(args[0]),))

elif cmd == 'list_sentry_roles_by_group':
    if len(args) != 1:
        print('list_sentry_roles_by_group requires 1 args')
        sys.exit(1)
    pp.pprint(client.list_sentry_roles_by_group(eval(args[0]),))

elif cmd == 'list_sentry_roles_by_user':
    if len(args) != 1:
        print('list_sentry_roles_by_user requires 1 args')
        sys.exit(1)
    pp.pprint(client.list_sentry_roles_by_user(eval(args[0]),))

elif cmd == 'list_sentry_privileges_by_role':
    if len(args) != 1:
        print('list_sentry_privileges_by_role requires 1 args')
        sys.exit(1)
    pp.pprint(client.list_sentry_privileges_by_role(eval(args[0]),))

elif cmd == 'list_sentry_privileges_by_user':
    if len(args) != 1:
        print('list_sentry_privileges_by_user requires 1 args')
        sys.exit(1)
    pp.pprint(client.list_sentry_privileges_by_user(eval(args[0]),))

elif cmd == 'list_sentry_privileges_by_user_and_itsgroups':
    if len(args) != 1:
        print('list_sentry_privileges_by_user_and_itsgroups requires 1 args')
        sys.exit(1)
    pp.pprint(client.list_sentry_privileges_by_user_and_itsgroups(eval(args[0]),))

elif cmd == 'list_sentry_privileges_for_provider':
    if len(args) != 1:
        print('list_sentry_privileges_for_provider requires 1 args')
        sys.exit(1)
    pp.pprint(client.list_sentry_privileges_for_provider(eval(args[0]),))

elif cmd == 'drop_sentry_privilege':
    if len(args) != 1:
        print('drop_sentry_privilege requires 1 args')
        sys.exit(1)
    pp.pprint(client.drop_sentry_privilege(eval(args[0]),))

elif cmd == 'rename_sentry_privilege':
    if len(args) != 1:
        print('rename_sentry_privilege requires 1 args')
        sys.exit(1)
    pp.pprint(client.rename_sentry_privilege(eval(args[0]),))

elif cmd == 'list_sentry_privileges_by_authorizable':
    if len(args) != 1:
        print('list_sentry_privileges_by_authorizable requires 1 args')
        sys.exit(1)
    pp.pprint(client.list_sentry_privileges_by_authorizable(eval(args[0]),))

elif cmd == 'get_sentry_config_value':
    if len(args) != 1:
        print('get_sentry_config_value requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_sentry_config_value(eval(args[0]),))

elif cmd == 'export_sentry_mapping_data':
    if len(args) != 1:
        print('export_sentry_mapping_data requires 1 args')
        sys.exit(1)
    pp.pprint(client.export_sentry_mapping_data(eval(args[0]),))

elif cmd == 'import_sentry_mapping_data':
    if len(args) != 1:
        print('import_sentry_mapping_data requires 1 args')
        sys.exit(1)
    pp.pprint(client.import_sentry_mapping_data(eval(args[0]),))

elif cmd == 'sentry_sync_notifications':
    if len(args) != 1:
        print('sentry_sync_notifications requires 1 args')
        sys.exit(1)
    pp.pprint(client.sentry_sync_notifications(eval(args[0]),))

elif cmd == 'sentry_notify_hms_event':
    if len(args) != 1:
        print('sentry_notify_hms_event requires 1 args')
        sys.exit(1)
    pp.pprint(client.sentry_notify_hms_event(eval(args[0]),))

elif cmd == 'list_roles_privileges':
    if len(args) != 1:
        print('list_roles_privileges requires 1 args')
        sys.exit(1)
    pp.pprint(client.list_roles_privileges(eval(args[0]),))

elif cmd == 'list_users_privileges':
    if len(args) != 1:
        print('list_users_privileges requires 1 args')
        sys.exit(1)
    pp.pprint(client.list_users_privileges(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
